// Prisma schema for session-only chat
// No user accounts - anonymous sessions only
// Supports text, stickers, images, and file messages

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Chat rooms with token-based access and expiration
model Room {
  id          String    @id @default(cuid())
  token       String    @unique // Token for joining the room
  createdAt   DateTime  @default(now())
  expiresAt   DateTime  // Room expiration time
  isActive    Boolean   @default(true)
  
  sessions    Session[]
  messages    Message[]
  
  @@index([token])
  @@index([expiresAt])
}

// Anonymous user sessions (no accounts)
model Session {
  id          String    @id @default(cuid())
  roomId      String
  nickname    String    // Display name for the session
  sessionToken String   @unique // Unique session identifier
  createdAt   DateTime  @default(now())
  lastActiveAt DateTime @default(now())
  
  room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  messages    Message[]
  
  @@index([sessionToken])
  @@index([roomId])
}

// Messages supporting different types
model Message {
  id          String      @id @default(cuid())
  roomId      String
  sessionId   String?     // Optional - can be null if session is deleted
  nickname    String      @default("Ghost") // Store nickname with message (denormalized for persistence)
  type        MessageType @default(TEXT)
  content     String?     // Text content or sticker code
  createdAt   DateTime    @default(now())
  editedAt    DateTime?
  isDeleted   Boolean     @default(false)
  
  room        Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  session     Session?    @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  attachments Attachment[]
  
  @@index([roomId])
  @@index([sessionId])
  @@index([createdAt])
}

// Message types enum
enum MessageType {
  TEXT
  STICKER
  IMAGE
  FILE
}

// Attachments for images and files
model Attachment {
  id          String    @id @default(cuid())
  messageId   String
  fileName    String
  fileSize    Int       // Size in bytes
  mimeType    String    // e.g., image/png, application/pdf
  url         String    // Storage URL or path
  createdAt   DateTime  @default(now())
  
  message     Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@index([messageId])
}
